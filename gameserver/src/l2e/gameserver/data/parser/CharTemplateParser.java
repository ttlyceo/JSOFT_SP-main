/*
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 *
 */
package l2e.gameserver.data.parser;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;

import l2e.gameserver.Config;
import l2e.gameserver.data.DocumentParser;
import l2e.gameserver.model.Location;
import l2e.gameserver.model.actor.templates.player.PcTemplate;
import l2e.gameserver.model.base.ClassId;
import l2e.gameserver.model.stats.StatsSet;

public final class CharTemplateParser extends DocumentParser
{
	private final Map<ClassId, PcTemplate> _charTemplates = new HashMap<>();
	
	private int _dataCount = 0;
	private int _autoGeneratedCount = 0;

	protected CharTemplateParser()
	{
		load();
	}

	@Override
	public void load()
	{
		parseDirectory("data/stats/chars/classes/", false);
		info("Loaded " + _charTemplates.size() + " character templates.");
		info("Loaded " + _dataCount + " level up gain records.");
		if (_autoGeneratedCount > 0)
		{
			_log.info("Generated " + _autoGeneratedCount + " level up gain records.");
		}

//		if(true)
//		{
//			try(Connection con = DatabaseFactory.getInstance().getConnection();
//				PreparedStatement preparedStatement = con.prepareStatement("SELECT * FROM char_templates");
////				PreparedStatement preparedStatement2 = con.prepareStatement("UPDATE `char_templates` SET `walk` = ?, `run` = ?, `slowSwim` = ?, `fastSwim` = ? WHERE `ClassId` = ?");
//				ResultSet resultSet = preparedStatement.executeQuery())
//			{
//				while (resultSet.next())
//				{
//					int classId = resultSet.getInt("ClassId");
//					ClassId cId = ClassId.getClassId(classId);
//					if(cId != null)
//					{
//						PcTemplate pcTemplate = _charTemplates.get(cId);
//						if(pcTemplate != null)
//						{
//							if(!DatabaseUtils.set("UPDATE `char_templates` SET `walk` = ?, `run` = ?, `slowSwim` = ?, `fastSwim` = ? WHERE `ClassId` = ?", pcTemplate.getBaseMoveSpeed(MoveType.WALK), pcTemplate.getBaseMoveSpeed(MoveType.RUN), pcTemplate.getBaseMoveSpeed(MoveType.SLOW_SWIM), pcTemplate.getBaseMoveSpeed(MoveType.FAST_SWIM), classId))
//								_log.warn("Error: set - classId: " + classId);
//						}
//					}
//
//				}
//			}
//			catch (Exception e)
//			{
//				_log.warn("(SCRIPT)Failed to connect to database.", e);
//			}
//		}
	}
	
	@Override
	protected void reloadDocument()
	{
	}
	
	@Override
	protected void parseDocument()
	{
		NamedNodeMap attrs;
		int classId = 0;

		for (Node n = getCurrentDocument().getFirstChild(); n != null; n = n.getNextSibling())
		{
			if ("list".equalsIgnoreCase(n.getNodeName()))
			{
				for (Node d = n.getFirstChild(); d != null; d = d.getNextSibling())
				{
					if ("classId".equalsIgnoreCase(d.getNodeName()))
					{
						classId = Integer.parseInt(d.getTextContent());
					}
					else if ("staticData".equalsIgnoreCase(d.getNodeName()))
					{
						final StatsSet set = new StatsSet();
						set.set("classId", classId);
						final List<Location> creationPoints = new ArrayList<>();

						for (Node nd = d.getFirstChild(); nd != null; nd = nd.getNextSibling())
						{
							if (nd.getNodeName().equals("#text"))
							{
								continue;
							}

							if (nd.getChildNodes().getLength() > 1)
							{
								for (Node cnd = nd.getFirstChild(); cnd != null; cnd = cnd.getNextSibling())
								{
									if (nd.getNodeName().equalsIgnoreCase("collisionMale"))
									{
										if (cnd.getNodeName().equalsIgnoreCase("radius"))
										{
											set.set("collision_radius", cnd.getTextContent());
										}
										else if (cnd.getNodeName().equalsIgnoreCase("height"))
										{
											set.set("collision_height", cnd.getTextContent());
										}
									}
									if ("node".equalsIgnoreCase(cnd.getNodeName()))
									{
										attrs = cnd.getAttributes();
										creationPoints.add(new Location(parseInt(attrs, "x"), parseInt(attrs, "y"), parseInt(attrs, "z")));
									}
									else if ("walk".equalsIgnoreCase(cnd.getNodeName()))
									{
										set.set("baseWalkSpd", cnd.getTextContent());
									}
									else if ("run".equalsIgnoreCase(cnd.getNodeName()))
									{
										set.set("baseRunSpd", cnd.getTextContent());
									}
									else if ("slowSwim".equals(cnd.getNodeName()))
									{
										set.set("baseSwimWalkSpd", cnd.getTextContent());
									}
									else if ("fastSwim".equals(cnd.getNodeName()))
									{
										set.set("baseSwimRunSpd", cnd.getTextContent());
									}
									else if (!cnd.getNodeName().equals("#text"))
									{
										set.set((nd.getNodeName() + cnd.getNodeName()), cnd.getTextContent());
									}
								}
							}
							else
							{
								set.set(nd.getNodeName(), nd.getTextContent());
							}
						}
						set.set("basePDef", (set.getInteger("basePDefchest", 0) + set.getInteger("basePDeflegs", 0) + set.getInteger("basePDefhead", 0) + set.getInteger("basePDeffeet", 0) + set.getInteger("basePDefgloves", 0) + set.getInteger("basePDefunderwear", 0) + set.getInteger("basePDefcloak", 0)));
						set.set("baseMDef", (set.getInteger("baseMDefrear", 0) + set.getInteger("baseMDeflear", 0) + set.getInteger("baseMDefrfinger", 0) + set.getInteger("baseMDefrfinger", 0) + set.getInteger("baseMDefneck", 0)));

						final PcTemplate ct = new PcTemplate(set, creationPoints);
						_charTemplates.put(ClassId.getClassId(classId), ct);
					}
					else if ("lvlUpgainData".equalsIgnoreCase(d.getNodeName()))
					{
						int level = 0;
						for (Node lvlNode = d.getFirstChild(); lvlNode != null; lvlNode = lvlNode.getNextSibling())
						{
							if ("level".equalsIgnoreCase(lvlNode.getNodeName()))
							{
								attrs = lvlNode.getAttributes();
								level = parseInt(attrs, "val");

								for (Node valNode = lvlNode.getFirstChild(); valNode != null; valNode = valNode.getNextSibling())
								{
									final String nodeName = valNode.getNodeName();

									if ((level < Config.PLAYER_MAXIMUM_LEVEL) && (nodeName.startsWith("hp") || nodeName.startsWith("mp") || nodeName.startsWith("cp")) && _charTemplates.containsKey(ClassId.getClassId(classId)))
									{
										_charTemplates.get(ClassId.getClassId(classId)).setUpgainValue(nodeName, level, Double.parseDouble(valNode.getTextContent()));
										_dataCount++;
									}
								}
							}
						}
						
						while (level < (Config.PLAYER_MAXIMUM_LEVEL - 1))
						{
							level++;
							_autoGeneratedCount++;
							final double hpM1 = _charTemplates.get(ClassId.getClassId(classId)).getBaseHpMax(level - 1);
							_charTemplates.get(ClassId.getClassId(classId)).setUpgainValue("hp", level, (((hpM1 * level) / (level - 1)) + ((hpM1 * (level + 1)) / (level - 1))) / 2);
							final double mpM1 = _charTemplates.get(ClassId.getClassId(classId)).getBaseMpMax(level - 1);
							_charTemplates.get(ClassId.getClassId(classId)).setUpgainValue("mp", level, (((mpM1 * level) / (level - 1)) + ((mpM1 * (level + 1)) / (level - 1))) / 2);
							final double cpM1 = _charTemplates.get(ClassId.getClassId(classId)).getBaseCpMax(level - 1);
							_charTemplates.get(ClassId.getClassId(classId)).setUpgainValue("cp", level, (((cpM1 * level) / (level - 1)) + ((cpM1 * (level + 1)) / (level - 1))) / 2);
							final double hpRegM1 = _charTemplates.get(ClassId.getClassId(classId)).getBaseHpRegen(level - 1);
							final double hpRegM2 = _charTemplates.get(ClassId.getClassId(classId)).getBaseHpRegen(level - 2);
							_charTemplates.get(ClassId.getClassId(classId)).setUpgainValue("hpRegen", level, (hpRegM1 * 2) - hpRegM2);
							final double mpRegM1 = _charTemplates.get(ClassId.getClassId(classId)).getBaseMpRegen(level - 1);
							final double mpRegM2 = _charTemplates.get(ClassId.getClassId(classId)).getBaseMpRegen(level - 2);
							_charTemplates.get(ClassId.getClassId(classId)).setUpgainValue("mpRegen", level, (mpRegM1 * 2) - mpRegM2);
							final double cpRegM1 = _charTemplates.get(ClassId.getClassId(classId)).getBaseCpRegen(level - 1);
							final double cpRegM2 = _charTemplates.get(ClassId.getClassId(classId)).getBaseCpRegen(level - 2);
							_charTemplates.get(ClassId.getClassId(classId)).setUpgainValue("cpRegen", level, (cpRegM1 * 2) - cpRegM2);
						}
					}
				}
			}
		}
	}

	public PcTemplate getTemplate(final ClassId classId)
	{
		return _charTemplates.get(classId);
	}

	public PcTemplate getTemplate(final int classId)
	{
		return _charTemplates.get(ClassId.getClassId(classId));
	}

	public static final CharTemplateParser getInstance()
	{
		return SingletonHolder._instance;
	}

	private static class SingletonHolder
	{
		protected static final CharTemplateParser _instance = new CharTemplateParser();
	}
}